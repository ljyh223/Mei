package com.ljyh.music

// 单句歌词（对应 [] 包裹的内容）
data class LyricLineBeta(
    val startTimeMs: Long,   // 句子开始时间（毫秒）
    val durationMs: Long,    // 句子总时长（毫秒）
    val words: List<LyricWord> // 逐字列表
)

data class LyricWord(
    val startTimeMs: Long,   // 开始时间（毫秒）
    val durationMs: Long,    // 持续时间（毫秒）
    val text: String,        // 文字内容
    var progress: Float = 0f // 动画进度（0-1）
)
fun main(){
    val testJson="{\"t\":-1000,\"c\":[{\"tx\":\"作词: \"},{\"tx\":\"潘云安\",\"li\":\"http://p1.music.126.net/F9aXRS_8lSxn_ot-1g2kkw==/109951166888364996.jpg\",\"or\":\"orpheus://nm/artist/home?id=12121083&type=artist\"}]}\n{\"t\":-800,\"c\":[{\"tx\":\"作曲: \"},{\"tx\":\"潘云安\",\"li\":\"http://p1.music.126.net/F9aXRS_8lSxn_ot-1g2kkw==/109951166888364996.jpg\",\"or\":\"orpheus://nm/artist/home?id=12121083&type=artist\"}]}\n{\"t\":-600,\"c\":[{\"tx\":\"词曲: \"},{\"tx\":\"告五人\"},{\"tx\":\"/\"},{\"tx\":\"云安\"}]}\n{\"t\":-400,\"c\":[{\"tx\":\"编曲: \"},{\"tx\":\"G.E.M.邓紫棋\",\"li\":\"http://p1.music.126.net/fq1O8ZRT5_FHzg_uLEtUQA==/109951167773880633.jpg\",\"or\":\"orpheus://nm/artist/home?id=7763&type=artist\"},{\"tx\":\"/\"},{\"tx\":\"T-Ma\",\"li\":\"http://p1.music.126.net/ymqNQMn8zUI1DYAuDs_5qA==/109951166380028467.jpg\",\"or\":\"orpheus://nm/artist/home?id=29916768&type=artist\"}]}\n{\"t\":-199,\"c\":[{\"tx\":\"制作人: \"},{\"tx\":\"G.E.M.邓紫棋\",\"li\":\"http://p1.music.126.net/fq1O8ZRT5_FHzg_uLEtUQA==/109951167773880633.jpg\",\"or\":\"orpheus://nm/artist/home?id=7763&type=artist\"},{\"tx\":\"/\"},{\"tx\":\"T-Ma\",\"li\":\"http://p1.music.126.net/ymqNQMn8zUI1DYAuDs_5qA==/109951166380028467.jpg\",\"or\":\"orpheus://nm/artist/home?id=29916768&type=artist\"}]}\n[0,3970](0,280,0)改(280,280,0)编(560,280,0)词(840,280,0)曲(1120,280,0)：(1400,280,0)G(1680,280,0).(1960,280,0)E(2240,280,0).(2520,280,0)M(2800,280,0).(3080,290,0)邓(3370,290,0)紫(3660,310,0)棋\n[3970,5670](3970,280,0)制(4250,280,0)作(4530,280,0)人(4810,280,0)：(5090,280,0)G(5370,280,0).(5650,280,0)E(5930,280,0).(6210,280,0)M(6490,280,0).(6770,280,0)邓(7050,280,0)紫(7330,280,0)棋 (7610,280,0)/ (7890,280,0)T(8170,280,0)-(8450,280,0)Ma(8730,280,0)马(9010,280,0)敬(9290,350,0)恒\n[9640,5410](9640,280,0)编(9920,280,0)曲(10200,280,0)：(10480,280,0)G(10760,280,0).(11040,280,0)E(11320,280,0).(11600,280,0)M(11880,280,0).(12160,280,0)邓(12440,280,0)紫(12720,280,0)棋 (13000,280,0)/ (13280,280,0)T(13560,280,0)-(13840,280,0)Ma(14120,280,0)马(14400,280,0)敬(14680,370,0)恒\n[15050,6000](15050,190,0)你(15240,490,0)真(15730,140,0)的(15870,430,0)懂(16300,1520,0)唯(17820,190,0) (18010,30,0)⼀(18040,100,0)的(18140,500,0)定(18640,730,0)义(19370,1680,0) \n[21050,7360](21050,510,0)并(21560,260,0)不(21820,550,0)简(22370,230,0)单(22600,310,0)如(22910,350,0)呼(23260,1570,0)吸(24830,3580,0) \n[28410,5860](28410,160,0)你(28570,490,0)真(29060,120,0)的(29180,490,0)希(29670,300,0)望(29970,940,0)你(30910,360,0) (31270,220,0)能(31490,430,0)厘(31920,860,0)清(32780,1490,0) \n[34270,5980](34270,580,0)若(34850,340,0)没(35190,460,0)交(35650,380,0)⼼(36030,850,0) (36880,270,0)怎(37150,1260,0)么(38410,30,0) (38440,530,0)说(38970,670,0)明(39640,610,0) \n[40250,13270](40250,690,0)我(40940,60,0) (41000,440,0)真(41440,910,0)的(42350,350,0) (42700,440,0)爱(43140,590,0)你 (43730,3120,0) (46850,890,0)句(47740,520,0)句(48260,300,0) (48560,270,0)不(48830,1050,0)轻(49880,870,0)易(50750,2770,0) \n[53520,13350](53520,750,0)眼(54270,960,0)神(55230,510,0)中(55740,280,0) (56020,520,0)飘(56540,780,0)移 (57320,2070,0) (59390,250,0)总(59640,210,0)是(59850,780,0)在(60630,420,0) (61050,440,0)关(61490,350,0)键(61840,470,0)时(62310,930,0)刻(63240,230,0) (63470,880,0)清(64350,670,0)楚(65020,220,0) (65240,330,0)洞(65570,780,0)悉(66350,520,0) \n[66870,13260](66870,930,0)你(67800,370,0)的(68170,420,0) (68590,590,0)不(69180,210,0) (69390,550,0)坚(69940,740,0)定 (70680,2060,0) (72740,260,0)配(73000,210,0)合(73210,600,0)我(73810,560,0) (74370,840,0)颠(75210,550,0)沛(75760,760,0)流(76520,1030,0)离(77550,2580,0) \n[80130,27840](80130,810,0)死(80940,970,0)去(81910,510,0)中(82420,260,0) (82680,470,0)清(83150,1900,0)醒 (85050,960,0) (86010,560,0)明(86570,180,0)⽩(86750,30,0) (86780,710,0)你(87490,260,0) (87750,490,0)背(88240,360,0)着(88600,480,0)我(89080,300,0) (89380,510,0)聪(89890,1650,0)明(91540,16430,0) \n[107970,6640](107970,180,0)那(108150,250,0)些(108400,130,0)我 (108530,270,0)想(108800,290,0)说(109090,210,0)的 (109300,290,0)没(109590,320,0)说(109910,340,0)的 (110250,820,0)话(111070,3540,0) \n[114610,6690](114610,180,0)有(114790,260,0)时(115050,160,0)我 (115210,330,0)怀(115540,120,0)疑(115660,410,0)呢 (116070,30,0) (116100,140,0)只(116240,270,0)是(116510,300,0)我 (116810,530,0)傻(117340,750,0)瓜(118090,3210,0) \n[121300,2930](121300,190,0)但(121490,280,0)如(121770,100,0)果(121870,330,0)真(122200,240,0)的(122440,180,0)爱 (122620,150,0) (122770,170,0)不(122940,30,0) (122970,210,0)会(123180,440,0)算(123620,480,0)计(124100,130,0) \n[124230,3720](124230,140,0)爱(124370,320,0)是(124690,100,0)不(124790,320,0)嫉(125110,190,0)妒 (125300,110,0)不(125410,290,0)张(125700,400,0)狂 (126100,180,0)不(126280,50,0) (126330,240,0)求(126570,30,0)⾃(126600,30,0)⼰(126630,1320,0) \n[127950,4600](127950,240,0)无(128190,280,0)关(128470,210,0)你(128680,110,0)的(128790,300,0)回(129090,250,0)应 (129340,330,0)永(129670,20,0) (129690,150,0)不(129840,150,0) (129990,30,0)⽌(130020,1580,0)息(131600,950,0) \n[132550,1010](132550,190,0)你(132740,300,0)知(133040,490,0)道(133530,30,0) \n[133560,13170](133560,550,0)我(134110,270,0) (134380,450,0)真(134830,420,0)的(135250,850,0) (136100,340,0)爱(136440,590,0)你 (137030,3080,0) (140110,1140,0)没(141250,480,0) (141730,30,0)⼈(141760,830,0)能(142590,510,0)比(143100,610,0)拟(143710,3020,0) \n[146730,13300](146730,910,0)眼(147640,340,0)神(147980,640,0) (148620,400,0)没(149020,380,0) (149400,510,0)肯(149910,640,0)定 (150550,2190,0) (152740,250,0)总(152990,250,0)是(153240,300,0)在(153540,850,0) (154390,490,0)关(154880,280,0)键(155160,500,0)时(155660,260,0)刻(155920,920,0) (156840,870,0)清(157710,580,0)楚(158290,270,0) (158560,300,0)洞(158860,930,0)悉(159790,240,0) \n[160030,13370](160030,1080,0)你(161110,310,0)的(161420,490,0) (161910,390,0)不(162300,410,0) (162710,550,0)坚(163260,460,0)定 (163720,2350,0) (166070,340,0)配(166410,150,0)合(166560,490,0)我(167050,570,0) (167620,1000,0)颠(168620,530,0)沛(169150,610,0)流(169760,1300,0)离(171060,2340,0) \n[173400,12520](173400,410,0)死(173810,430,0)去(174240,930,0) (175170,300,0)中(175470,520,0) (175990,520,0)清(176510,750,0)醒 (177260,2100,0) (179360,410,0)明(179770,40,0)⽩(179810,470,0)你(180280,660,0) (180940,620,0)背(181560,350,0)着(181910,280,0)我(182190,280,0) (182470,590,0)聪(183060,1310,0)明(184370,1550,0) \n[185920,1020](185920,160,0)我(186080,310,0)知(186390,310,0)道(186700,240,0) \n[186940,13160](186940,670,0)爱(187610,120,0) (187730,210,0)本(187940,640,0) (188580,570,0)质(189150,330,0) (189480,440,0)无(189920,860,0)异 (190780,1880,0) (192660,380,0)是(193040,140,0)因(193180,660,0)为(193840,620,0) (194460,400,0)⼈(194860,460,0)多(195320,190,0)得(195510,350,0) (195860,670,0)拥(196530,730,0)挤(197260,2840,0) \n[200100,12590](200100,920,0)你(201020,890,0)不(201910,570,0)想(202480,260,0) (202740,390,0)证(203130,1150,0)明 (204280,1730,0) (206010,360,0)证(206370,210,0)明(206580,650,0)我(207230,410,0) (207640,550,0)是(208190,670,0)你(208860,490,0) (209350,1930,0)唯(211280,30,0) (211310,30,0)⼀(211340,1350,0) \n[212690,7430](212690,430,0)证(213120,480,0)明(213600,590,0)我(214190,140,0) (214330,530,0)是(214860,600,0)你(215460,600,0) (216060,2350,0)唯(218410,1680,0) (220090,30,0)⼀\n[220120,4420](220120,880,0)混(221000,880,0)音(221880,880,0)：(222760,880,0)Claudia (223640,900,0)Koh\n[224540,7960](224540,880,0)母(225420,880,0)带(226300,880,0)：(227180,880,0)T(228060,880,0)-(228940,880,0)Ma(229820,880,0)马(230700,880,0)敬(231580,920,0)恒\n[232500,8840](232500,880,0)OP(233380,880,0)：(234260,880,0)更(235140,880,0)漂(236020,880,0)亮(236900,880,0)音(237780,880,0)乐(238660,880,0)工(239540,880,0)作(240420,920,0)室\n[241340,12390](241340,880,0)SP(242220,880,0)：(243100,880,0)相(243980,880,0)信(244860,880,0)音(245740,880,0)乐(246620,880,0)国(247500,880,0)际(248380,880,0)股(249260,880,0)份(250140,880,0)有(251020,880,0)限(251900,910,0)公(252810,920,0)司\n"


    val result = parseLyrics(testJson.split("\n"))

    println(result[5])
}


fun parseLyrics(lines: List<String>): List<LyricLineBeta> {
    val regex = "\\[(\\d+),(\\d+)\\](.*)".toRegex()
    val wordRegex = "\\((\\d+),(\\d+),\\d+\\)([^\\(\\)]*)".toRegex()

    return lines.mapNotNull { line ->
        val matchResult = regex.matchEntire(line) ?: return@mapNotNull null
        val (lineStart, lineDuration, wordsText) = matchResult.destructured

        val words = wordRegex.findAll(wordsText.trim()).map { wordMatch ->
            val (wordStart, wordDuration, wordText) = wordMatch.destructured
            LyricWord(
                startTimeMs = wordStart.toLong(),
                durationMs = wordDuration.toLong() * 10, // 厘秒转毫秒
                text = wordText.trim()
            )
        }.toList()

        LyricLineBeta(
            startTimeMs = lineStart.toLong(),
            durationMs = lineDuration.toLong(),
            words = words
        )
    }
}
